#include extensions_global.conf
#include extensions_internal.conf

[disa-request]
exten => _X.,1,Set(IE=${EXTEN})
same => n,Goto(disa-request,s,1)

exten => s,1,Noop(DISA callback request)

;normalize number
same => n,Macro(international-format,${REWRITE_COUNTRY},${CALLERID(num)})
;same => n,Set(CALLERID(num)=${INTERNATIONAL_NUMBER})

same => n,Noop((incoming)CALLERID(num): ${CALLERID(num)})
same => n,Noop(INTERNATIONAL_NUMBER: ${INTERNATIONAL_NUMBER})
same => n,Noop(ANI: ${ANI})
same => n,Noop(DNIS: ${DNIS})
same => n,Noop(EXTEN: ${EXTEN})
same => n,Noop(IncomingExten: ${IE})

same => n,GotoIf($[${ISNULL(${CALLERID(num)})}]?busy,s,1)

same => n,GotoIf($[${INTERNATIONAL_NUMBER}=${ALLOWED_NUMBER_0}]?busy)
same => n,GotoIf($[${INTERNATIONAL_NUMBER}=${ALLOWED_NUMBER_1}]?busy)
same => n,GotoIf($[${INTERNATIONAL_NUMBER}=${ALLOWED_NUMBER_2}]?busy)

; if none of the numbers matching
same => n,Noop(NOT ALLOWED NUMBER: ${INTERNATIONAL_NUMBER})
same => n,Goto(busy,s,1)

same => n(busy),Busy(600)

exten => h,1,Noop(Starting DISA Callback)
same => n,System(sleep 5)
;Concurrent call limit check
same => n,Noop(Callback on ${TRUNK_CALLBACK} trunk. Concurrent calls: ${GROUP_COUNT(${TRUNK_CALLBACK})})
;same => n,GotoIf($[${GROUP_COUNT(${TRUNK_CALLBACK})} >= ${TRUNK_CALLBACK_MAX_CALLS}]?skip-originate)
;same => n,Originate(SIP/${TRUNK_CALLBACK}/${CALLERID(num)},exten,disa-out,${CALLERID(num)},1)
same => n,Originate(Local/${INTERNATIONAL_NUMBER}@originate-context,exten,disa-out,${INTERNATIONAL_NUMBER},1)
same => n,Noop(Originate status: ${ORIGINATE_STATUS})
; declined call protection
same => n,GotoIf($[${ORIGINATE_STATUS} != SUCCESS]?busy,s,1:end)
;same => n(skip-originate),Noop(Callback originate skipped. Concurrent call limit exceeded.)
same => n(end),Noop(End of disa-request context)

[disa-out]
exten => _X.,1,Noop(DISA Context Extension for ${EXTEN})

; Play menu

; Read quickdial number of DTMF_CHOICE
same => n(read-choice),Read(DTMF_CHOICE,dial,1,i,1,10)

; If read timeout then hangup
same => n,GotoIf($[${READSTATUS}=OK]?:hup)

; If read number is 0 then go to "call"
same => n,GotoIf($[${DTMF_CHOICE}=0]?call)

; Read number to call from GLOBAL config
same => n,Set(NUMBER_TO_CALL=${QUICKDIAL_${DTMF_CHOICE}})

; Print number to call
same => n(ntc),Noop(NUMBER_TO_CALL: ${NUMBER_TO_CALL})

; Check the number length
same => n,Set(NUMBER_LENGTH=${LEN(${NUMBER_TO_CALL})})

; If Length = 0 then read again else call it
same => n,Set(CALLERID(num)=${EXTEN})
same => n,GotoIf($[${NUMBER_LENGTH}=0]?read-choice:outbound,${NUMBER_TO_CALL},1)

same => n(call),Read(NUMBER_TO_CALL,dial,0,i,1,10)
same => n,Noop(NUMBER_TO_CALL: ${NUMBER_TO_CALL})
same => n,GotoIf($[${READSTATUS}=OK]?outbound,${NUMBER_TO_CALL},1)
same => n(hup),Hangup()

[outbound]
exten => _X.,1,Set(TIMEOUT(response)=10)
same => n,Set(OUTBOUND_CALLERID=${CALLERID(num)})
same => n,Noop(CALLERID: ${OUTBOUND_CALLERID})
same => n,Noop(CALLED: ${EXTEN})
same => n,Noop(Record call: ${RECORD_CALL})
same => n,GotoIf($[${RECORD_CALL} = ON]?record:dial)
same => n(record),Set(RECORD_FILE=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-${TRUNK_OUTGOING}-${OUTBOUND_CALLERID}-${EXTEN})
same => n,Set(CALLFILENAME=${RECORD_PATH}${RECORD_FILE}.${RECORD_FORMAT})
same => n,Noop(CALLFILENAME: ${CALLFILENAME})
same => n,MixMonitor(${CALLFILENAME},b,)
;same => n(dial),Dial(SIP/${TRUNK_OUTGOING}/${EXTEN}, 600, rA(beeperr)F(hangup,s,1))
same => n(dial),Macro(sip-dialer,${OUTBOUND_CALLERID},${TRUNK_OUTGOING},${EXTEN},${TRUNK_OUTGOING_MAX_CALLS})
;same => n(dial),Macro(stdvoip,SIP/${TRUNK_OUTGOING}/${EXTEN},${TRUNK_OUTGOING},${TRUNK_OUTGOING_MAX_CALLS})
same => n,Hangup()

[hangup]
exten => s,1,Hangup(60)

[busy]
exten => s,1,Busy(60)

[congestion]
exten => s,1,Congestion(60)

[hangup-context]
exten => s,1,Busy(60)
exten => s,n,Congestion(60)
exten => s,n,Hangup(60)
exten => i,1,Hangup
exten => t,1,Hangup

[originate-context]
;exten => _X.,1,Set(CALLERID(num)=${EXTEN})
;exten => _X.,n,Dial(SIP/${TRUNK_CALLBACK}/${EXTEN})
exten => _X.,1,Macro(sip-dialer,${EXTEN},${TRUNK_CALLBACK},${EXTEN},${TRUNK_CALLBACK_MAX_CALLS})
;same => n(dial),Macro(stdvoip,SIP/${TRUNK_CALLBACK}/${EXTEN},${TRUNK_CALLBACK},${TRUNK_CALLBACK_MAX_CALLS})

;;;;;;;;;;;;;;;;;;;;;; MACROS ;;;;;;;;;;;;;;;;;;;;;;;

; macro-sip-dialer
; Macro to make outbound calls on a SIP trunk
; with concurrent call limit feature
;	${ARG1} Caller ID
;	${ARG2} Trunk name
;	${ARG3} Called number
;	${ARG4} Max concurrent calls
[macro-sip-dialer]
exten => s,1,Noop(***SIP DIALER MACRO Dialing: ${ARG3} ***)
;same => n,Set(GROUP()=${ARG2})
same => n,Set(OUTBOUND_GROUP=${ARG2}) ;Set Group
same => n,Noop(Current calls: ${GROUP_COUNT(${ARG2})}, Limit: ${ARG4})
same => n,GotoIf($[${GROUP_COUNT(${ARG2})} >= ${ARG4}]?unavail)
same => n,Noop(Number of concurrent calls: ${GROUP_COUNT(${ARG2})})
;same => n(dial),Set(SIP_CODEC_OUTBOUND=ulaw)
same => n,Set(CALLERID(num)=${ARG1})
same => n,Dial(SIP/${ARG2}/${ARG3}, 600, rA(beeperr)F(hangup,s,1))
same => n,Noop(SIP DIALER MACRO DIAL COMPLETE, hangup...)
same => n,Goto(end)

same => n(unavail),Noop(${GROUP_COUNT(${ARG2})} concurrent calls limit reached)
same => n,Set(DIALSTATUS=CHANUNAVAIL)

same => n(end),Noop(SIP DIALER MACRO END)



[macro-stdvoip]
; ${ARG1} - full dial string
; ${ARG2} - GROUPNAME
; ${ARG3] - LIMIT
; Return ${DIALSTATUS} = CHANUNAVAIL if ${VOIPMAX} exceeded
exten => s,1,Set(OUTBOUND_GROUP=${ARG2}) ;Set Group
exten => s,2,GotoIf($[${GROUP_COUNT(${ARG2})} >= ${ARG3}]?103) ;Exceeded?
exten => s,3,Dial(${ARG1}) ;dial it
exten => s,103,Set(DIALSTATUS=CHANUNAVAIL) ;deny call


; macro-international-format
; Macro for transforming local number format to international
;   ${ARG1} - Country code
;   ${ARG2} - Local number
;
[macro-international-format]
exten => s,1,Noop(Country: ${ARG1}, Local number: ${ARG2})
same => n,Set(INTERNATIONAL_NUMBER=${ARG2})
same => n,Goto(${ARG1})

; *** HUNGARY ***
same => n(hu),Noop(HU)

;check if caller ID length = 7
same => n(seven-check),GotoIf($[${LEN(${INTERNATIONAL_NUMBER})} = 7]?prefix)

; if we got caller ID starting with 06
same => n,GotoIf($[${INTERNATIONAL_NUMBER:0:2} = 06]?intl:return);

; then prefix it with 0621
same => n(prefix),Set(INTERNATIONAL_NUMBER=0621${INTERNATIONAL_NUMBER})

; cut 06
same => n(intl),Set(INTERNATIONAL_NUMBER=${INTERNATIONAL_NUMBER:2})

; prefix with 0036
same => n,Set(INTERNATIONAL_NUMBER=0036${INTERNATIONAL_NUMBER})
same => n,Goto(return)


; *** RETURN ***
same => n(return),Noop(INTERNATIONAL_NUMBER: ${INTERNATIONAL_NUMBER})
