#include extensions_global.conf
#include extensions_internal.conf

[disa-request]
exten => _X.,1,Set(IE=${EXTEN})
same => n,Goto(disa-request,s,1)

exten => s,1,Noop(DISA callback request)

; filter private numbers
same => n,GotoIf($[${LEN(${CALLERID(num)})} = 0]?busy,s,1)

;normalize number
same => n,Macro(international-format,${REWRITE_COUNTRY},${CALLERID(num)})

same => n,Noop((incoming)CALLERID(num): ${CALLERID(num)})
same => n,Noop(INTERNATIONAL_NUMBER: ${INTERNATIONAL_NUMBER})
same => n,Noop(ANI: ${ANI})
same => n,Noop(DNIS: ${DNIS})
same => n,Noop(EXTEN: ${EXTEN})
same => n,Noop(IncomingExten: ${IE})

; set Allowed Number Index helper variable for the while loop
same => n,Set(AN_INDEX=0);
; loop through the allowed numbers until the first empty value
;same => n,While($[${LEN(${$[ALLOWED_NUMBER_${AN_INDEX}]})} != 0])
same => n(while-start),Noop(AN_INDEX: ${AN_INDEX})
; if we found an allowed number, jump to callback
same => n,GotoIf($["${INTERNATIONAL_NUMBER}"="${ALLOWED_NUMBER_${AN_INDEX}}"]?busy-signal-before-callback)
; increase loop counter
same => n,Set(AN_INDEX=$[${AN_INDEX} + 1])
; endless loop protection
;same => n,GotoIf($[${AN_INDEX} = 9999]?busy,s,1)
; end of while loop
;same => n,EndWhile()
same => n(while-end),GotoIf($[${LEN(${$[ALLOWED_NUMBER_${AN_INDEX}]})} != 0]?while-start)

; if no matching number
same => n,Noop(NOT ALLOWED NUMBER: ${INTERNATIONAL_NUMBER})
; exit this context and go to busy context
same => n,Goto(busy,s,1)

; jump here if number matching
same => n(busy-signal-before-callback),Busy(600)

exten => h,1,Noop(Starting DISA Callback)
same => n,System(sleep 5)

;Concurrent call limit check
same => n,Noop(Callback on ${TRUNK_CALLBACK} trunk. Concurrent calls: ${GROUP_COUNT(${TRUNK_CALLBACK})})
same => n,Originate(Local/${INTERNATIONAL_NUMBER}@originate-context,exten,disa-out,${INTERNATIONAL_NUMBER},1)
same => n,Noop(Originate status: ${ORIGINATE_STATUS})

; declined call protection
same => n,GotoIf($[${ORIGINATE_STATUS} != SUCCESS]?busy,s,1:end)

same => n(end),Noop(End of disa-request context)

[disa-out]
exten => _X.,1,Noop(DISA Context Extension for ${EXTEN})

; Play menu

; Read quickdial number of DTMF_CHOICE
same => n(read-choice),Read(DTMF_CHOICE,dial,1,i,1,10)

; If read timeout then hangup
same => n,GotoIf($[${READSTATUS}=OK]?:hup)

; If read number is 0 then go to "call"
same => n,GotoIf($[${DTMF_CHOICE}=0]?call)

; Read number to call from GLOBAL config
same => n,Set(NUMBER_TO_CALL=${QUICKDIAL_${DTMF_CHOICE}})

; Print number to call
same => n(ntc),Noop(NUMBER_TO_CALL: ${NUMBER_TO_CALL})

; Check the number length
same => n,Set(NUMBER_LENGTH=${LEN(${NUMBER_TO_CALL})})

; If Length = 0 then read again else call it
same => n,Set(CALLERID(num)=${EXTEN})
same => n,GotoIf($[${NUMBER_LENGTH}=0]?read-choice:outbound,${NUMBER_TO_CALL},1)

same => n(call),Read(NUMBER_TO_CALL,dial,0,i,1,10)
same => n,Noop(NUMBER_TO_CALL: ${NUMBER_TO_CALL})
same => n,GotoIf($[${READSTATUS}=OK]?outbound,${NUMBER_TO_CALL},1)
same => n(hup),Hangup()

[outbound]
exten => _X.,1,Set(TIMEOUT(response)=10)
same => n,Set(OUTBOUND_CALLERID=${CALLERID(num)})
same => n,Noop(CALLERID: ${OUTBOUND_CALLERID})
same => n,Noop(CALLED: ${EXTEN})
same => n,Noop(Record call: ${RECORD_CALL})
same => n,GotoIf($[${RECORD_CALL} = ON]?record:dial)
same => n(record),Set(RECORD_FILE=${STRFTIME(${EPOCH},,%Y%m%d-%H%M%S)}-${TRUNK_OUTGOING}-${OUTBOUND_CALLERID}-${EXTEN})
same => n,Set(CALLFILENAME=${RECORD_PATH}${RECORD_FILE}.${RECORD_FORMAT})
same => n,Noop(CALLFILENAME: ${CALLFILENAME})
same => n,MixMonitor(${CALLFILENAME},b,)
same => n(dial),Noop(outbound-dial)
same => n,Macro(sip-dialer,${OUTBOUND_CALLERID},${TRUNK_OUTGOING},${EXTEN},${TRUNK_OUTGOING_MAX_CALLS})
same => n,Goto(hangup,s,1)

[hangup]
exten => s,1,Hangup(60)

[busy]
exten => s,1,Busy(60)

[congestion]
exten => s,1,Congestion(60)

[hangup-context]
exten => s,1,Busy(60)
exten => s,n,Congestion(60)
exten => s,n,Hangup(60)
exten => i,1,Hangup
exten => t,1,Hangup

[originate-context]
exten => _X.,1,Macro(sip-dialer,${EXTEN},${TRUNK_CALLBACK},${EXTEN},${TRUNK_CALLBACK_MAX_CALLS},${CONTEXT})

;[sip-dialer-recall]
;exten => s,1,Macro(sip-dialer,${SDR_ARG1},${SDR_ARG2},${SDR_ARG3},${SDR_ARG4})
;same => s,Goto(${SDR_CONTEXT},${SDR_EXTEN},${SDR_PRIO})

;;;;;;;;;;;;;;;;;;;;;; MACROS ;;;;;;;;;;;;;;;;;;;;;;;

; macro-sip-dialer
; Macro to make outbound calls on a SIP trunk
; with concurrent call limit feature
;	${ARG1} Caller ID
;	${ARG2} Trunk name
;	${ARG3} Called number
;	${ARG4} Max concurrent calls
;	${ARG5} Source context name
[macro-sip-dialer]
exten => s,1,Noop(***SIP DIALER MACRO***)
same => n(begin),Noop(***Dialing: ${ARG3} ***)

; length check (if zero length, then hangup)
same => n(lengthcheck),GotoIf($[${LEN(${ARG3})} = 0]?hangup,s,1);

; <<< Called number matching

;test international
same => n(test-international),GotoIf($[${REGEX("${REGEX_INTERNATIONAL}" ${ARG3})} = 0]?test-internal)
same => n,Noop(***INTERNATIONAL NUMBER***)
; if an extension called, and that value is an international number, then we would have
; "internal" trunk, but we need outgoing trunk, so rewrite.
same => n,Set(ARG2=${TRUNK_OUTGOING}) ;Trunk name for calling and limiting
same => n,Set(ARG4=${TRUNK_OUTGOING_MAX_CALLS}) ;Outgoing max calls
same => n,Noop(SOURCE CONTEXT: ${ARG5})

; if it's a callback call, so rewrite the trunk name
same => n,GotoIf($["${ARG5}"="originate-context"]?set-callback-trunk:set-dialstring)

same => n(set-callback-trunk),Set(ARG2=${TRUNK_CALLBACK})
same => n,Set(ARG4=${TRUNK_CALLBACK_MAX_CALLS})
same => n(set-dialstring),Set(DIALSTRING=SIP/${ARG2}/${ARG3})

same => n,Goto(regex-end)

; test internal
; if not internal extension then check for international format
same => n(test-internal),GotoIf($[${REGEX("${REGEX_INTERNAL_EXT}" ${ARG3})} != 1]?dial-user)
same => n,Noop(***INTERNAL EXTENSION***)
; load extension value
same => n,Set(DIALED_EXT=${ARG3})
same => n,Set(ARG2=${TRUNK_INTERNAL})
same => n,Set(ARG3=${EXT_${ARG3}})
same => n,Set(ARG4=${TRUNK_INTERNAL_MAX_CALLS})
; There's no direct call to an extension number (if it's an extension, then read the value of it)
; if value is an international number or an username, then we can call them.
same=> n,Goto(begin)

; else try call user
same => n(dial-user),Noop(***TRY DIAL AS LOCAL USER***)
same => n,Set(DIALSTRING=SIP/${ARG3})
same => n,Goto(regex-end)

same => n(regex-end),Noop(REGEX END)
; Called number matching >>>

; Associate channel to a group to limit concurrent calls
same => n,Set(OUTBOUND_GROUP=${ARG2}) ;Set Group
same => n,Noop(Current calls: ${GROUP_COUNT(${ARG2})}, Limit: ${ARG4})
same => n,GotoIf($[${GROUP_COUNT(${ARG2})} >= ${ARG4}]?unavail)
same => n,Noop(Number of concurrent calls: ${GROUP_COUNT(${ARG2})})

; Set callerID to the call
same => n,Set(CALLERID(num)=${ARG1})
same => n,Dial(${DIALSTRING}, ${TIMEOUT_RING}, rA(beeperr)F(hangup,s,1))
same => n,Noop(SIP DIALER MACRO DIAL COMPLETE: ${DIALSTATUS})

; Check if internal extension was called
; If there's no dialed internal extension 
; or event handler for the current extension
; Then go to end
same => n,GotoIf($[${LEN(${EXT_${DIALED_EXT}_${DIALSTATUS}})} = 0]?end)
; read event handler variable value
same => n,Set(TO_CALL=${EXT_${DIALED_EXT}_${DIALSTATUS}})

;recursive call
; load extension value
same => n,Set(DIALED_EXT=${ARG3})
same => n,Set(ARG2=${TRUNK_INTERNAL})
same => n,Set(ARG3=${TO_CALL})
same => n,Set(ARG4=${TRUNK_INTERNAL_MAX_CALLS})
; There's no direct call to an extension number (if it's an extension, then read the value of it)
; if value is an international number or an username, then we can call them.
same=> n,Goto(begin)

same => n(unavail),Noop(${GROUP_COUNT(${ARG2})} concurrent calls limit reached)
same => n,Set(DIALSTATUS=CHANUNAVAIL)

same => n(end),Noop(SIP DIALER MACRO END)

; macro-international-format
; Macro for transforming local number format to international
;   ${ARG1} - Country code
;   ${ARG2} - Local number
[macro-international-format]
exten => s,1,Noop(Country: ${ARG1}, Local number: ${ARG2})
same => n,Set(INTERNATIONAL_NUMBER=${ARG2})
same => n,Goto(${ARG1})

; *** HUNGARY ***
same => n(hu),Noop(HU)

;check if caller ID length = 7
same => n(seven-check),GotoIf($[${LEN(${INTERNATIONAL_NUMBER})} = 7]?prefix)

; if we got caller ID starting with 06
same => n,GotoIf($[${INTERNATIONAL_NUMBER:0:2} = 06]?intl:return);

; then prefix it with 0621
same => n(prefix),Set(INTERNATIONAL_NUMBER=0621${INTERNATIONAL_NUMBER})

; cut 06
same => n(intl),Set(INTERNATIONAL_NUMBER=${INTERNATIONAL_NUMBER:2})

; prefix with 0036
same => n,Set(INTERNATIONAL_NUMBER=0036${INTERNATIONAL_NUMBER})
same => n,Goto(return)

; *** RETURN ***
same => n(return),Noop(INTERNATIONAL_NUMBER: ${INTERNATIONAL_NUMBER})
